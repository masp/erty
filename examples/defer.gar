module defer

type State struct {
    Count int
    Stage atom
}

type Result interface {
    'ok'
    ('ok', state State)
    ('ok', map[atom]any)
    ('error', rc int)
}

func map() {

}

func add(s State) (res Result) { 
    // equivalent to assigning a new variable
    // S = S#{Count => S#Count+1}
    s.Count = s.Count + 1

    defer func() {
        match err = recover() {
            'ok' => return
            ('badmatch', cause) => 'error'
            _ => raise(err)
        }
    }()

    v := a()
    if v == 'error' {
        return 'error'
    }
    {ok, A} := v
    if A < 0 {
        s.Count += 1
    }

    v := b()
    if b == 'wrong' {
        return 'error'
    }
    {ok, B} := v
    return A+B
}

func catch() {
    defer func() {
        err = catch()
        if 
    }
    dangerous()
}