map(F, [H|T]) -> [F(H)|map(F, T)];
map(F, [])    -> [].

func map(F func(any) any, L []any) {
    match L {
    case [H int, T int...]:
        return [F(H) | map(F, T)]
    case []:
        return []
    }
}

func map[T any](f func(T) T, l []T) {
    match L {
    case []T{h, tail...}:
        return [f(h) | map(f, tail)]
    case []:
        return []
    }
}