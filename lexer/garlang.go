// Code generated by re2c 2.2 on Fri May 12 21:47:24 2023, DO NOT EDIT.
package lexer

import (
    "bytes"
    "github.com/masp/garlang/token"
)

func (l *Lexer) lex() (pos token.Pos, tok token.Type, lit string, err error) {
    for {
		lit = ""
		pos = l.pos()
		l.token = l.cursor


{
	var yych byte
	yyaccept := 0
	yych = l.input[l.cursor]
	switch (yych) {
	case 0x00:
		goto yy2
	case '\t':
		fallthrough
	case ' ':
		goto yy6
	case '\n':
		goto yy9
	case '\r':
		goto yy11
	case '!':
		goto yy12
	case '"':
		goto yy13
	case '\'':
		goto yy15
	case '(':
		goto yy17
	case ')':
		goto yy19
	case '*':
		goto yy21
	case '+':
		goto yy23
	case ',':
		goto yy25
	case '-':
		goto yy27
	case '.':
		goto yy29
	case '/':
		goto yy31
	case '0':
		goto yy33
	case '1':
		fallthrough
	case '2':
		fallthrough
	case '3':
		fallthrough
	case '4':
		fallthrough
	case '5':
		fallthrough
	case '6':
		fallthrough
	case '7':
		fallthrough
	case '8':
		fallthrough
	case '9':
		goto yy34
	case ':':
		goto yy37
	case ';':
		goto yy39
	case '<':
		goto yy41
	case '=':
		goto yy43
	case '>':
		goto yy45
	case 'A':
		fallthrough
	case 'B':
		fallthrough
	case 'C':
		fallthrough
	case 'D':
		fallthrough
	case 'E':
		fallthrough
	case 'F':
		fallthrough
	case 'G':
		fallthrough
	case 'H':
		fallthrough
	case 'I':
		fallthrough
	case 'J':
		fallthrough
	case 'K':
		fallthrough
	case 'L':
		fallthrough
	case 'M':
		fallthrough
	case 'N':
		fallthrough
	case 'O':
		fallthrough
	case 'P':
		fallthrough
	case 'Q':
		fallthrough
	case 'R':
		fallthrough
	case 'S':
		fallthrough
	case 'T':
		fallthrough
	case 'U':
		fallthrough
	case 'V':
		fallthrough
	case 'W':
		fallthrough
	case 'X':
		fallthrough
	case 'Y':
		fallthrough
	case 'Z':
		fallthrough
	case '_':
		fallthrough
	case 'a':
		fallthrough
	case 'b':
		fallthrough
	case 'c':
		fallthrough
	case 'd':
		fallthrough
	case 'e':
		fallthrough
	case 'g':
		fallthrough
	case 'h':
		fallthrough
	case 'i':
		fallthrough
	case 'j':
		fallthrough
	case 'k':
		fallthrough
	case 'l':
		fallthrough
	case 'n':
		fallthrough
	case 'o':
		fallthrough
	case 'p':
		fallthrough
	case 'q':
		fallthrough
	case 's':
		fallthrough
	case 'u':
		fallthrough
	case 'v':
		fallthrough
	case 'w':
		fallthrough
	case 'x':
		fallthrough
	case 'y':
		fallthrough
	case 'z':
		goto yy47
	case '[':
		goto yy50
	case ']':
		goto yy52
	case '`':
		goto yy54
	case 'f':
		goto yy56
	case 'm':
		goto yy57
	case 'r':
		goto yy58
	case 't':
		goto yy59
	case '{':
		goto yy60
	case '}':
		goto yy62
	default:
		goto yy4
	}
yy2:
	l.cursor += 1
	{ tok = token.EOF; return }
yy4:
	l.cursor += 1
yy5:
	{ err = ErrUnrecognizedToken; return }
yy6:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '\t') {
		goto yy6
	}
	if (yych == ' ') {
		goto yy6
	}
	{
			continue
		}
yy9:
	l.cursor += 1
	{
			if l.insertSemi() {
				l.cursor = l.token // Has the effect of "inserting" the semicolon in the input
				tok = token.Semicolon
				lit = "\n"
				return
			} else {
				l.file.AddLine(l.token)
				continue
			}
		}
yy11:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '\n') {
		goto yy9
	}
	goto yy5
yy12:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '=') {
		goto yy64
	}
	goto yy5
yy13:
	l.cursor += 1
	{ return l.lexString('"') }
yy15:
	l.cursor += 1
	{
            pos, tok, lit, err = l.lexString('\'')
            if tok == token.String {
                tok = token.Atom
            }
            return
        }
yy17:
	l.cursor += 1
	{ tok = token.LParen; lit = "("; return }
yy19:
	l.cursor += 1
	{ tok = token.RParen; lit = ")"; return }
yy21:
	l.cursor += 1
	{ tok = token.Star; lit = "*"; return }
yy23:
	l.cursor += 1
	{ tok = token.Plus; lit = "+"; return }
yy25:
	l.cursor += 1
	{ tok = token.Comma; lit = ","; return }
yy27:
	l.cursor += 1
	{ tok = token.Minus; lit = "-"; return }
yy29:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= '/') {
		goto yy30
	}
	if (yych <= '9') {
		goto yy66
	}
yy30:
	{ tok = token.Period; lit = "."; return }
yy31:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '/') {
		goto yy69
	}
	{ tok = token.Slash; lit = "/"; return }
yy33:
	yyaccept = 0
	l.cursor += 1
	l.marker = l.cursor
	yych = l.input[l.cursor]
	if (yych <= '9') {
		if (yych == '.') {
			goto yy66
		}
		if (yych <= '/') {
			goto yy5
		}
		goto yy72
	} else {
		if (yych <= 'E') {
			if (yych <= 'D') {
				goto yy5
			}
			goto yy75
		} else {
			if (yych == 'e') {
				goto yy75
			}
			goto yy5
		}
	}
yy34:
	yyaccept = 1
	l.cursor += 1
	l.marker = l.cursor
	yych = l.input[l.cursor]
	if (yych <= '9') {
		if (yych == '.') {
			goto yy66
		}
		if (yych >= '0') {
			goto yy34
		}
	} else {
		if (yych <= 'E') {
			if (yych >= 'E') {
				goto yy75
			}
		} else {
			if (yych == 'e') {
				goto yy75
			}
		}
	}
yy36:
	{ tok = token.Integer; lit = l.literal(); return }
yy37:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '=') {
		goto yy76
	}
	{ tok = token.Colon; lit = ":"; return }
yy39:
	l.cursor += 1
	{ tok = token.Semicolon; lit = ";"; return }
yy41:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '=') {
		goto yy78
	}
	{ tok = token.Less; lit = "<"; return }
yy43:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '=') {
		goto yy80
	}
	{ tok = token.Equal; lit = "="; return }
yy45:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == '=') {
		goto yy82
	}
	{ tok = token.Greater; lit = ">"; return }
yy47:
	l.cursor += 1
	yych = l.input[l.cursor]
yy48:
	if (yych <= 'Z') {
		if (yych <= '/') {
			goto yy49
		}
		if (yych <= '9') {
			goto yy47
		}
		if (yych >= 'A') {
			goto yy47
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') {
				goto yy47
			}
		} else {
			if (yych <= '`') {
				goto yy49
			}
			if (yych <= 'z') {
				goto yy47
			}
		}
	}
yy49:
	{ tok = token.Identifier; lit = l.literal(); return }
yy50:
	l.cursor += 1
	{ tok = token.LSquareBracket; lit = "["; return }
yy52:
	l.cursor += 1
	{ tok = token.RSquareBracket; lit = "]"; return }
yy54:
	l.cursor += 1
	{ return l.lexRawString('`') }
yy56:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'u') {
		goto yy84
	}
	goto yy48
yy57:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'a') {
		goto yy85
	}
	if (yych == 'o') {
		goto yy86
	}
	goto yy48
yy58:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'e') {
		goto yy87
	}
	goto yy48
yy59:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'u') {
		goto yy88
	}
	if (yych == 'y') {
		goto yy89
	}
	goto yy48
yy60:
	l.cursor += 1
	{ tok = token.LCurlyBracket; lit = "{"; return }
yy62:
	l.cursor += 1
	{ tok = token.RCurlyBracket; lit = "}"; return }
yy64:
	l.cursor += 1
	{ tok = token.BangEqual; lit = "!="; return }
yy66:
	yyaccept = 2
	l.cursor += 1
	l.marker = l.cursor
	yych = l.input[l.cursor]
	if (yych <= 'D') {
		if (yych <= '/') {
			goto yy68
		}
		if (yych <= '9') {
			goto yy66
		}
	} else {
		if (yych <= 'E') {
			goto yy75
		}
		if (yych == 'e') {
			goto yy75
		}
	}
yy68:
	{ tok = token.Float; lit = l.literal(); return }
yy69:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= '\n') {
		if (yych <= 0x00) {
			goto yy71
		}
		if (yych <= '\t') {
			goto yy69
		}
	} else {
		if (yych != '\r') {
			goto yy69
		}
	}
yy71:
	{ tok = token.Comment; lit = l.literal(); return }
yy72:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= '9') {
		if (yych == '.') {
			goto yy66
		}
		if (yych >= '0') {
			goto yy72
		}
	} else {
		if (yych <= 'E') {
			if (yych >= 'E') {
				goto yy75
			}
		} else {
			if (yych == 'e') {
				goto yy75
			}
		}
	}
yy74:
	l.cursor = l.marker
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy5
		} else {
			goto yy36
		}
	} else {
		goto yy68
	}
yy75:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= ',') {
		if (yych == '+') {
			goto yy90
		}
		goto yy74
	} else {
		if (yych <= '-') {
			goto yy90
		}
		if (yych <= '/') {
			goto yy74
		}
		if (yych <= '9') {
			goto yy91
		}
		goto yy74
	}
yy76:
	l.cursor += 1
	{ tok = token.ColonEqual; lit = ":="; return }
yy78:
	l.cursor += 1
	{ tok = token.LessEqual; lit = "<="; return }
yy80:
	l.cursor += 1
	{ tok = token.EqualEqual; lit = "=="; return }
yy82:
	l.cursor += 1
	{ tok = token.GreaterEqual; lit = ">="; return }
yy84:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'n') {
		goto yy93
	}
	goto yy48
yy85:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'p') {
		goto yy94
	}
	goto yy48
yy86:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'd') {
		goto yy96
	}
	goto yy48
yy87:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 't') {
		goto yy97
	}
	goto yy48
yy88:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'p') {
		goto yy98
	}
	goto yy48
yy89:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'p') {
		goto yy99
	}
	goto yy48
yy90:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= '/') {
		goto yy74
	}
	if (yych >= ':') {
		goto yy74
	}
yy91:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= '/') {
		goto yy68
	}
	if (yych <= '9') {
		goto yy91
	}
	goto yy68
yy93:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'c') {
		goto yy100
	}
	goto yy48
yy94:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= 'Z') {
		if (yych <= '/') {
			goto yy95
		}
		if (yych <= '9') {
			goto yy47
		}
		if (yych >= 'A') {
			goto yy47
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') {
				goto yy47
			}
		} else {
			if (yych <= '`') {
				goto yy95
			}
			if (yych <= 'z') {
				goto yy47
			}
		}
	}
yy95:
	{ tok = token.Map; lit = "map"; return }
yy96:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'u') {
		goto yy102
	}
	goto yy48
yy97:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'u') {
		goto yy103
	}
	goto yy48
yy98:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'l') {
		goto yy104
	}
	goto yy48
yy99:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'e') {
		goto yy105
	}
	goto yy48
yy100:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= 'Z') {
		if (yych <= '/') {
			goto yy101
		}
		if (yych <= '9') {
			goto yy47
		}
		if (yych >= 'A') {
			goto yy47
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') {
				goto yy47
			}
		} else {
			if (yych <= '`') {
				goto yy101
			}
			if (yych <= 'z') {
				goto yy47
			}
		}
	}
yy101:
	{ tok = token.Func; lit = "func"; return }
yy102:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'l') {
		goto yy107
	}
	goto yy48
yy103:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'r') {
		goto yy108
	}
	goto yy48
yy104:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'e') {
		goto yy109
	}
	goto yy48
yy105:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= 'Z') {
		if (yych <= '/') {
			goto yy106
		}
		if (yych <= '9') {
			goto yy47
		}
		if (yych >= 'A') {
			goto yy47
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') {
				goto yy47
			}
		} else {
			if (yych <= '`') {
				goto yy106
			}
			if (yych <= 'z') {
				goto yy47
			}
		}
	}
yy106:
	{ tok = token.TypeKeyword; lit = "type"; return }
yy107:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'e') {
		goto yy111
	}
	goto yy48
yy108:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych == 'n') {
		goto yy113
	}
	goto yy48
yy109:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= 'Z') {
		if (yych <= '/') {
			goto yy110
		}
		if (yych <= '9') {
			goto yy47
		}
		if (yych >= 'A') {
			goto yy47
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') {
				goto yy47
			}
		} else {
			if (yych <= '`') {
				goto yy110
			}
			if (yych <= 'z') {
				goto yy47
			}
		}
	}
yy110:
	{ tok = token.Tuple; lit = "tuple"; return }
yy111:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= 'Z') {
		if (yych <= '/') {
			goto yy112
		}
		if (yych <= '9') {
			goto yy47
		}
		if (yych >= 'A') {
			goto yy47
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') {
				goto yy47
			}
		} else {
			if (yych <= '`') {
				goto yy112
			}
			if (yych <= 'z') {
				goto yy47
			}
		}
	}
yy112:
	{ tok = token.Module; lit = "module"; return }
yy113:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= 'Z') {
		if (yych <= '/') {
			goto yy114
		}
		if (yych <= '9') {
			goto yy47
		}
		if (yych >= 'A') {
			goto yy47
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') {
				goto yy47
			}
		} else {
			if (yych <= '`') {
				goto yy114
			}
			if (yych <= 'z') {
				goto yy47
			}
		}
	}
yy114:
	{ tok = token.Return; lit = "return"; return }
}

    }
}

func (l *Lexer) lexString(quote byte) (pos token.Pos, tok token.Type, lit string, err error) {
	var buf bytes.Buffer
	for {
		var u byte

{
	var yych byte
	yych = l.input[l.cursor]
	if (yych <= '\n') {
		if (yych <= 0x00) {
			goto yy117
		}
		if (yych <= '\t') {
			goto yy119
		}
		goto yy121
	} else {
		if (yych == '\\') {
			goto yy123
		}
		goto yy119
	}
yy117:
	l.cursor += 1
	{
			err = ErrUnterminatedString
			tok = token.EOF
            pos = l.file.Pos(l.token)
			return
		}
yy119:
	l.cursor += 1
	{
			u = yych
			if u == quote {
				tok = token.String
				pos = l.file.Pos(l.token)
				lit = string(buf.Bytes())
				return
			}
			buf.WriteByte(u)
			continue
		}
yy121:
	l.cursor += 1
yy122:
	{ err = ErrInvalidString; return }
yy123:
	l.cursor += 1
	yych = l.input[l.cursor]
	if (yych <= 'b') {
		if (yych <= '>') {
			if (yych <= '"') {
				if (yych <= '!') {
					goto yy122
				}
			} else {
				if (yych == '\'') {
					goto yy126
				}
				goto yy122
			}
		} else {
			if (yych <= '\\') {
				if (yych <= '?') {
					goto yy128
				}
				if (yych <= '[') {
					goto yy122
				}
				goto yy130
			} else {
				if (yych <= '`') {
					goto yy122
				}
				if (yych <= 'a') {
					goto yy132
				}
				goto yy134
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'f') {
				if (yych <= 'e') {
					goto yy122
				}
				goto yy136
			} else {
				if (yych == 'n') {
					goto yy138
				}
				goto yy122
			}
		} else {
			if (yych <= 't') {
				if (yych <= 'r') {
					goto yy140
				}
				if (yych <= 's') {
					goto yy122
				}
				goto yy142
			} else {
				if (yych == 'v') {
					goto yy144
				}
				goto yy122
			}
		}
	}
	l.cursor += 1
	{ buf.WriteByte('"'); continue }
yy126:
	l.cursor += 1
	{ buf.WriteByte('\''); continue }
yy128:
	l.cursor += 1
	{ buf.WriteByte('?'); continue }
yy130:
	l.cursor += 1
	{ buf.WriteByte('\\'); continue }
yy132:
	l.cursor += 1
	{ buf.WriteByte('\a'); continue }
yy134:
	l.cursor += 1
	{ buf.WriteByte('\b'); continue }
yy136:
	l.cursor += 1
	{ buf.WriteByte('\f'); continue }
yy138:
	l.cursor += 1
	{ buf.WriteByte('\n'); continue }
yy140:
	l.cursor += 1
	{ buf.WriteByte('\r'); continue }
yy142:
	l.cursor += 1
	{ buf.WriteByte('\t'); continue }
yy144:
	l.cursor += 1
	{ buf.WriteByte('\v'); continue }
}
		
	}
}

func (l *Lexer) lexRawString(quote byte) (pos token.Pos, tok token.Type, lit string, err error) {
	for {

{
	var yych byte
	yych = l.input[l.cursor]
	if (yych >= 0x01) {
		goto yy150
	}
	l.cursor += 1
	{
			err = ErrUnterminatedString
			tok = token.EOF
            pos = l.file.Pos(l.token)
			return
		}
yy150:
	l.cursor += 1
	{
			if yych == quote {
				tok = token.String
				pos = l.file.Pos(l.token)
				lit = string(l.input[l.token+1:l.cursor-1])
				return
			}
			continue
		}
}
		
	}
}